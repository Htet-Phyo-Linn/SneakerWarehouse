DELIMITER $$

CREATE FUNCTION add_sneaker_quantity(
    p_sneaker_id INT,
    p_color_id INT,
    p_size_id INT,
    p_quantity_to_add INT
) RETURNS INT
BEGIN
    DECLARE v_old_quantity INT;
    DECLARE v_new_quantity INT;

    -- Get the current quantity
    SELECT quantity INTO v_old_quantity
    FROM sneaker_color_size
    WHERE sneaker_id = p_sneaker_id
      AND color_id = p_color_id
      AND size_id = p_size_id;

    -- Calculate the new quantity
    SET v_new_quantity = v_old_quantity + p_quantity_to_add;

    -- Return the new quantity
    RETURN v_new_quantity;
END$$

DELIMITER ;




DELIMITER $$

CREATE FUNCTION subtract_sneaker_quantity(
    p_sneaker_id INT,
    p_color_id INT,
    p_size_id INT,
    p_quantity_to_subtract INT
) RETURNS INT
BEGIN
    DECLARE v_old_quantity INT;
    DECLARE v_new_quantity INT;

    -- Get the current quantity
    SELECT quantity INTO v_old_quantity
    FROM sneaker_color_size
    WHERE sneaker_id = p_sneaker_id
      AND color_id = p_color_id
      AND size_id = p_size_id;

    -- Calculate the new quantity
    SET v_new_quantity = v_old_quantity - p_quantity_to_subtract;

    -- Return the new quantity
    RETURN v_new_quantity;
END$$

DELIMITER ;



-- Get the new quantity after addition
SELECT add_sneaker_quantity(1, 1, 1, 5) AS new_quantity;

-- Get the new quantity after subtraction
SELECT subtract_sneaker_quantity(1, 1, 1, 3) AS new_quantity;


UPDATE sneaker_color_size
SET quantity = add_sneaker_quantity(1, 1, 1, 5)
WHERE sneaker_id = 1 AND color_id = 1 AND size_id = 1;


UPDATE sneaker_color_size
SET quantity = subtract_sneaker_quantity(1, 1, 1, 3)
WHERE sneaker_id = 1 AND color_id = 1 AND size_id = 1;



DELIMITER $$

CREATE PROCEDURE update_sneaker_quantity_with_log(
    IN p_sneaker_id INT,
    IN p_color_id INT,
    IN p_size_id INT,
    IN p_quantity_change INT,
    IN p_staff_id INT,
    IN p_operation_type VARCHAR(10)  -- 'ADD' or 'SUB'
)
BEGIN
    DECLARE v_new_quantity INT;

    -- Determine the new quantity based on the operation type using functions
    IF p_operation_type = 'ADD' THEN
        SET v_new_quantity = add_sneaker_quantity(p_sneaker_id, p_color_id, p_size_id, p_quantity_change);
    ELSEIF p_operation_type = 'SUB' THEN
        SET v_new_quantity = subtract_sneaker_quantity(p_sneaker_id, p_color_id, p_size_id, p_quantity_change);
    ELSE
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid operation type. Use "ADD" or "SUB".';
    END IF;

    -- Check if the new quantity is valid
    IF v_new_quantity < 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Quantity cannot be less than zero.';
    ELSE
        -- Update the quantity in the sneaker_color_size table
        UPDATE sneaker_color_size
        SET quantity = v_new_quantity
        WHERE sneaker_id = p_sneaker_id
          AND color_id = p_color_id
          AND size_id = p_size_id;

        -- Log the change in the sneaker_color_size_log table
        INSERT INTO sneaker_color_size_log (
            sneaker_id, 
            color_id, 
            size_id, 
            old_quantity, 
            new_quantity, 
            staff_id
        ) VALUES (
            p_sneaker_id, 
            p_color_id, 
            p_size_id, 
            (SELECT quantity FROM sneaker_color_size WHERE sneaker_id = p_sneaker_id AND color_id = p_color_id AND size_id = p_size_id), 
            v_new_quantity, 
            p_staff_id
        );
    END IF;
END$$

DELIMITER ;


CALL update_sneaker_quantity_with_log(1, 1, 1, 10, 1, 'ADD');

CALL update_sneaker_quantity_with_log(1, 1, 1, 5, 1, 'SUB');
